/* tslint:disable */
/* eslint-disable */
/**
 * API V2
 * For more information see [wiki.beds24.com/index.php/API_V2.0](https://wiki.beds24.com/index.php/API_V2.0)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PriceRulesPriceFor
 */
export interface PriceRulesPriceFor {
    /**
     * 
     * @type {string}
     * @memberof PriceRulesPriceFor
     */
    type?: PriceRulesPriceForTypeEnum;
    /**
     * Used to specifty the maximum occupancy if the priceType is set to upToPerson
     * @type {number}
     * @memberof PriceRulesPriceFor
     */
    upToPersonValue?: number | null;
}


/**
 * @export
 */
export const PriceRulesPriceForTypeEnum = {
    PerPerson: 'perPerson',
    MaxCapacity: 'maxCapacity',
    UpToPerson: 'upToPerson'
} as const;
export type PriceRulesPriceForTypeEnum = typeof PriceRulesPriceForTypeEnum[keyof typeof PriceRulesPriceForTypeEnum];


/**
 * Check if a given object implements the PriceRulesPriceFor interface.
 */
export function instanceOfPriceRulesPriceFor(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PriceRulesPriceForFromJSON(json: any): PriceRulesPriceFor {
    return PriceRulesPriceForFromJSONTyped(json, false);
}

export function PriceRulesPriceForFromJSONTyped(json: any, ignoreDiscriminator: boolean): PriceRulesPriceFor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'upToPersonValue': !exists(json, 'upToPersonValue') ? undefined : json['upToPersonValue'],
    };
}

export function PriceRulesPriceForToJSON(value?: PriceRulesPriceFor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'upToPersonValue': value.upToPersonValue,
    };
}

