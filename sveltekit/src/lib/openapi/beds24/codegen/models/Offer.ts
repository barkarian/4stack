/* tslint:disable */
/* eslint-disable */
/**
 * API V2
 * For more information see [wiki.beds24.com/index.php/API_V2.0](https://wiki.beds24.com/index.php/API_V2.0)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OfferAllowCancellation } from './OfferAllowCancellation';
import {
    OfferAllowCancellationFromJSON,
    OfferAllowCancellationFromJSONTyped,
    OfferAllowCancellationToJSON,
} from './OfferAllowCancellation';
import type { OfferMinimumStay } from './OfferMinimumStay';
import {
    OfferMinimumStayFromJSON,
    OfferMinimumStayFromJSONTyped,
    OfferMinimumStayToJSON,
} from './OfferMinimumStay';

/**
 * 
 * @export
 * @interface Offer
 */
export interface Offer {
    /**
     * 
     * @type {number}
     * @memberof Offer
     */
    offerId?: number;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    enable?: OfferEnableEnum;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Offer
     */
    position?: number;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    bookingType?: OfferBookingTypeEnum;
    /**
     * 
     * @type {OfferMinimumStay}
     * @memberof Offer
     */
    minimumStay?: OfferMinimumStay;
    /**
     * 
     * @type {OfferAllowCancellation}
     * @memberof Offer
     */
    allowCancellation?: OfferAllowCancellation;
}


/**
 * @export
 */
export const OfferEnableEnum = {
    OnlyIfAvailable: 'onlyIfAvailable',
    No: 'no',
    Always: 'always',
    Internal: 'internal',
    InternalManual: 'internalManual'
} as const;
export type OfferEnableEnum = typeof OfferEnableEnum[keyof typeof OfferEnableEnum];

/**
 * @export
 */
export const OfferBookingTypeEnum = {
    Default: 'default',
    RequestWithManualConfirmation: 'requestWithManualConfirmation',
    RequestWithCreditCard: 'requestWithCreditCard',
    ConfirmedWithCreditCard: 'confirmedWithCreditCard',
    ConfirmedWithDepositCollection1: 'confirmedWithDepositCollection1',
    ConfirmedWithDepositCollection2: 'confirmedWithDepositCollection2'
} as const;
export type OfferBookingTypeEnum = typeof OfferBookingTypeEnum[keyof typeof OfferBookingTypeEnum];


/**
 * Check if a given object implements the Offer interface.
 */
export function instanceOfOffer(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function OfferFromJSON(json: any): Offer {
    return OfferFromJSONTyped(json, false);
}

export function OfferFromJSONTyped(json: any, ignoreDiscriminator: boolean): Offer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'offerId': !exists(json, 'offerId') ? undefined : json['offerId'],
        'enable': !exists(json, 'enable') ? undefined : json['enable'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'position': !exists(json, 'position') ? undefined : json['position'],
        'bookingType': !exists(json, 'bookingType') ? undefined : json['bookingType'],
        'minimumStay': !exists(json, 'minimumStay') ? undefined : OfferMinimumStayFromJSON(json['minimumStay']),
        'allowCancellation': !exists(json, 'allowCancellation') ? undefined : OfferAllowCancellationFromJSON(json['allowCancellation']),
    };
}

export function OfferToJSON(value?: Offer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'offerId': value.offerId,
        'enable': value.enable,
        'name': value.name,
        'position': value.position,
        'bookingType': value.bookingType,
        'minimumStay': OfferMinimumStayToJSON(value.minimumStay),
        'allowCancellation': OfferAllowCancellationToJSON(value.allowCancellation),
    };
}

