/* tslint:disable */
/* eslint-disable */
/**
 * API V2
 * For more information see [wiki.beds24.com/index.php/API_V2.0](https://wiki.beds24.com/index.php/API_V2.0)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookingsPost201ResponseInner,
  PropertiesGet200Response,
  Property,
  UnsuccessfulApiResponse,
} from '../models/index';
import {
    BookingsPost201ResponseInnerFromJSON,
    BookingsPost201ResponseInnerToJSON,
    PropertiesGet200ResponseFromJSON,
    PropertiesGet200ResponseToJSON,
    PropertyFromJSON,
    PropertyToJSON,
    UnsuccessfulApiResponseFromJSON,
    UnsuccessfulApiResponseToJSON,
} from '../models/index';

export interface PropertiesDeleteRequest {
    id?: Array<number>;
}

export interface PropertiesGetRequest {
    id?: Array<number>;
    includeLanguages?: Array<PropertiesGetIncludeLanguagesEnum>;
    includeTexts?: Array<PropertiesGetIncludeTextsEnum>;
    includePictures?: boolean;
    includeOffers?: boolean;
    includePriceRules?: boolean;
    includeUpsellItems?: boolean;
    includeSearchCriteria?: boolean;
    includeAllRooms?: boolean;
    includeUnitDetails?: boolean;
    roomId?: Array<number>;
    page?: number;
}

export interface PropertiesPostRequest {
    property?: Array<Property>;
}

export interface PropertiesRoomsDeleteRequest {
    id?: Array<number>;
}

/**
 * 
 */
export class PropertiesApi extends runtime.BaseAPI {

    /**
     * Under construction - Delete properties by id
     */
    async propertiesDeleteRaw(requestParameters: PropertiesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookingsPost201ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/properties`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingsPost201ResponseInnerFromJSON));
    }

    /**
     * Under construction - Delete properties by id
     */
    async propertiesDelete(requestParameters: PropertiesDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookingsPost201ResponseInner>> {
        const response = await this.propertiesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Beta - Get properties matching specified criteria
     */
    async propertiesGetRaw(requestParameters: PropertiesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertiesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.includeLanguages) {
            queryParameters['includeLanguages'] = requestParameters.includeLanguages;
        }

        if (requestParameters.includeTexts) {
            queryParameters['includeTexts'] = requestParameters.includeTexts;
        }

        if (requestParameters.includePictures !== undefined) {
            queryParameters['includePictures'] = requestParameters.includePictures;
        }

        if (requestParameters.includeOffers !== undefined) {
            queryParameters['includeOffers'] = requestParameters.includeOffers;
        }

        if (requestParameters.includePriceRules !== undefined) {
            queryParameters['includePriceRules'] = requestParameters.includePriceRules;
        }

        if (requestParameters.includeUpsellItems !== undefined) {
            queryParameters['includeUpsellItems'] = requestParameters.includeUpsellItems;
        }

        if (requestParameters.includeSearchCriteria !== undefined) {
            queryParameters['includeSearchCriteria'] = requestParameters.includeSearchCriteria;
        }

        if (requestParameters.includeAllRooms !== undefined) {
            queryParameters['includeAllRooms'] = requestParameters.includeAllRooms;
        }

        if (requestParameters.includeUnitDetails !== undefined) {
            queryParameters['includeUnitDetails'] = requestParameters.includeUnitDetails;
        }

        if (requestParameters.roomId) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/properties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertiesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Beta - Get properties matching specified criteria
     */
    async propertiesGet(requestParameters: PropertiesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertiesGet200Response> {
        const response = await this.propertiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Under construction - Create or modify properties
     */
    async propertiesPostRaw(requestParameters: PropertiesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookingsPost201ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/properties`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.property.map(PropertyToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingsPost201ResponseInnerFromJSON));
    }

    /**
     * Under construction - Create or modify properties
     */
    async propertiesPost(requestParameters: PropertiesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookingsPost201ResponseInner>> {
        const response = await this.propertiesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Under construction - Delete rooms by id
     */
    async propertiesRoomsDeleteRaw(requestParameters: PropertiesRoomsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookingsPost201ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/properties/rooms`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingsPost201ResponseInnerFromJSON));
    }

    /**
     * Under construction - Delete rooms by id
     */
    async propertiesRoomsDelete(requestParameters: PropertiesRoomsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookingsPost201ResponseInner>> {
        const response = await this.propertiesRoomsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PropertiesGetIncludeLanguagesEnum = {
    All: 'all',
    En: 'en',
    Ar: 'ar',
    Bg: 'bg',
    Ca: 'ca',
    Cs: 'cs',
    Da: 'da',
    De: 'de',
    El: 'el',
    Es: 'es',
    Et: 'et',
    Fi: 'fi',
    Fr: 'fr',
    Hr: 'hr',
    He: 'he',
    Hu: 'hu',
    Id: 'id',
    Is: 'is',
    It: 'it',
    Ja: 'ja',
    Ko: 'ko',
    Lt: 'lt',
    Mn: 'mn',
    My: 'my',
    Nl: 'nl',
    No: 'no',
    Pl: 'pl',
    Pt: 'pt',
    Ro: 'ro',
    Ru: 'ru',
    Sk: 'sk',
    Sl: 'sl',
    Sr: 'sr',
    Sv: 'sv',
    Th: 'th',
    Tr: 'tr',
    Vi: 'vi',
    Zh: 'zh',
    Zt: 'zt'
} as const;
export type PropertiesGetIncludeLanguagesEnum = typeof PropertiesGetIncludeLanguagesEnum[keyof typeof PropertiesGetIncludeLanguagesEnum];
/**
 * @export
 */
export const PropertiesGetIncludeTextsEnum = {
    All: 'all',
    Property: 'property',
    RoomType: 'roomType'
} as const;
export type PropertiesGetIncludeTextsEnum = typeof PropertiesGetIncludeTextsEnum[keyof typeof PropertiesGetIncludeTextsEnum];
