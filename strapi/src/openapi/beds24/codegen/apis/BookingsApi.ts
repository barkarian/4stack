/* tslint:disable */
/* eslint-disable */
/**
 * API V2
 * For more information see [wiki.beds24.com/index.php/API_V2.0](https://wiki.beds24.com/index.php/API_V2.0)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookingsGet200Response,
  BookingsInvoicesGet200Response,
  BookingsMessagesGet200Response,
  BookingsMessagesPatchRequest,
  BookingsPost201ResponseInner,
  BookingsPostRequestInner,
  HostMessage,
  UnsuccessfulApiResponse,
} from '../models/index';
import {
    BookingsGet200ResponseFromJSON,
    BookingsGet200ResponseToJSON,
    BookingsInvoicesGet200ResponseFromJSON,
    BookingsInvoicesGet200ResponseToJSON,
    BookingsMessagesGet200ResponseFromJSON,
    BookingsMessagesGet200ResponseToJSON,
    BookingsMessagesPatchRequestFromJSON,
    BookingsMessagesPatchRequestToJSON,
    BookingsPost201ResponseInnerFromJSON,
    BookingsPost201ResponseInnerToJSON,
    BookingsPostRequestInnerFromJSON,
    BookingsPostRequestInnerToJSON,
    HostMessageFromJSON,
    HostMessageToJSON,
    UnsuccessfulApiResponseFromJSON,
    UnsuccessfulApiResponseToJSON,
} from '../models/index';

export interface BookingsDeleteRequest {
    id?: Array<number>;
}

export interface BookingsGetRequest {
    filter?: BookingsGetFilterEnum;
    propertyId?: Array<number>;
    roomId?: Array<number>;
    id?: Array<number>;
    masterId?: Array<number>;
    apiReference?: Array<string>;
    channel?: BookingsGetChannelEnum;
    arrival?: Date;
    arrivalFrom?: Date;
    arrivalTo?: Date;
    departure?: Date;
    departureFrom?: Date;
    departureTo?: Date;
    bookingTimeFrom?: Date;
    bookingTimeTo?: Date;
    modifiedFrom?: Date;
    modifiedTo?: Date;
    searchString?: string;
    includeInvoiceItems?: boolean;
    includeInfoItems?: boolean;
    includeInfoItemsConverted?: boolean;
    includeGuests?: boolean;
    includeBookingGroup?: boolean;
    status?: Array<BookingsGetStatusEnum>;
    page?: number;
}

export interface BookingsInvoicesGetRequest {
    bookingId?: Array<number>;
    page?: number;
}

export interface BookingsMessagesGetRequest {
    id?: Array<number>;
    propertyId?: Array<number>;
    roomId?: Array<number>;
    bookingId?: Array<number>;
    masterId?: Array<number>;
    filter?: BookingsMessagesGetFilterEnum;
    maxAge?: number;
    messageSource?: BookingsMessagesGetMessageSourceEnum;
    page?: number;
}

export interface BookingsMessagesPatchOperationRequest {
    messageId?: Array<number>;
    propertyId?: Array<number>;
    roomId?: Array<number>;
    bookingId?: Array<number>;
    masterId?: Array<number>;
    bookingsMessagesPatchRequest?: BookingsMessagesPatchRequest;
}

export interface BookingsMessagesPostRequest {
    hostMessage?: Array<HostMessage>;
}

export interface BookingsPostRequest {
    bookingsPostRequestInner?: Array<BookingsPostRequestInner>;
}

/**
 * 
 */
export class BookingsApi extends runtime.BaseAPI {

    /**
     * Delete bookings by id
     */
    async bookingsDeleteRaw(requestParameters: BookingsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookingsPost201ResponseInner>>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/bookings`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingsPost201ResponseInnerFromJSON));
    }

    /**
     * Delete bookings by id
     */
    async bookingsDelete(requestParameters: BookingsDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookingsPost201ResponseInner>> {
        const response = await this.bookingsDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * By default only upcoming bookings will be returned
     * Get bookings matching specified criteria
     */
    async bookingsGetRaw(requestParameters: BookingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.propertyId) {
            queryParameters['propertyId'] = requestParameters.propertyId;
        }

        if (requestParameters.roomId) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.masterId) {
            queryParameters['masterId'] = requestParameters.masterId;
        }

        if (requestParameters.apiReference) {
            queryParameters['apiReference'] = requestParameters.apiReference;
        }

        if (requestParameters.channel !== undefined) {
            queryParameters['channel'] = requestParameters.channel;
        }

        if (requestParameters.arrival !== undefined) {
            queryParameters['arrival'] = (requestParameters.arrival as any).toISOString().substring(0,10);
        }

        if (requestParameters.arrivalFrom !== undefined) {
            queryParameters['arrivalFrom'] = (requestParameters.arrivalFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.arrivalTo !== undefined) {
            queryParameters['arrivalTo'] = (requestParameters.arrivalTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.departure !== undefined) {
            queryParameters['departure'] = (requestParameters.departure as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureFrom !== undefined) {
            queryParameters['departureFrom'] = (requestParameters.departureFrom as any).toISOString().substring(0,10);
        }

        if (requestParameters.departureTo !== undefined) {
            queryParameters['departureTo'] = (requestParameters.departureTo as any).toISOString().substring(0,10);
        }

        if (requestParameters.bookingTimeFrom !== undefined) {
            queryParameters['bookingTimeFrom'] = (requestParameters.bookingTimeFrom as any).toISOString();
        }

        if (requestParameters.bookingTimeTo !== undefined) {
            queryParameters['bookingTimeTo'] = (requestParameters.bookingTimeTo as any).toISOString();
        }

        if (requestParameters.modifiedFrom !== undefined) {
            queryParameters['modifiedFrom'] = (requestParameters.modifiedFrom as any).toISOString();
        }

        if (requestParameters.modifiedTo !== undefined) {
            queryParameters['modifiedTo'] = (requestParameters.modifiedTo as any).toISOString();
        }

        if (requestParameters.searchString !== undefined) {
            queryParameters['searchString'] = requestParameters.searchString;
        }

        if (requestParameters.includeInvoiceItems !== undefined) {
            queryParameters['includeInvoiceItems'] = requestParameters.includeInvoiceItems;
        }

        if (requestParameters.includeInfoItems !== undefined) {
            queryParameters['includeInfoItems'] = requestParameters.includeInfoItems;
        }

        if (requestParameters.includeInfoItemsConverted !== undefined) {
            queryParameters['includeInfoItemsConverted'] = requestParameters.includeInfoItemsConverted;
        }

        if (requestParameters.includeGuests !== undefined) {
            queryParameters['includeGuests'] = requestParameters.includeGuests;
        }

        if (requestParameters.includeBookingGroup !== undefined) {
            queryParameters['includeBookingGroup'] = requestParameters.includeBookingGroup;
        }

        if (requestParameters.status) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/bookings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * By default only upcoming bookings will be returned
     * Get bookings matching specified criteria
     */
    async bookingsGet(requestParameters: BookingsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingsGet200Response> {
        const response = await this.bookingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Under construction - Get invoices
     */
    async bookingsInvoicesGetRaw(requestParameters: BookingsInvoicesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingsInvoicesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.bookingId) {
            queryParameters['bookingId'] = requestParameters.bookingId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/bookings/invoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingsInvoicesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Under construction - Get invoices
     */
    async bookingsInvoicesGet(requestParameters: BookingsInvoicesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingsInvoicesGet200Response> {
        const response = await this.bookingsInvoicesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get messages
     */
    async bookingsMessagesGetRaw(requestParameters: BookingsMessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookingsMessagesGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.propertyId) {
            queryParameters['propertyId'] = requestParameters.propertyId;
        }

        if (requestParameters.roomId) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.bookingId) {
            queryParameters['bookingId'] = requestParameters.bookingId;
        }

        if (requestParameters.masterId) {
            queryParameters['masterId'] = requestParameters.masterId;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.maxAge !== undefined) {
            queryParameters['maxAge'] = requestParameters.maxAge;
        }

        if (requestParameters.messageSource !== undefined) {
            queryParameters['messageSource'] = requestParameters.messageSource;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/bookings/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookingsMessagesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get messages
     */
    async bookingsMessagesGet(requestParameters: BookingsMessagesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookingsMessagesGet200Response> {
        const response = await this.bookingsMessagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Make changes in all messages in a selection.
     */
    async bookingsMessagesPatchRaw(requestParameters: BookingsMessagesPatchOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.messageId) {
            queryParameters['messageId'] = requestParameters.messageId;
        }

        if (requestParameters.propertyId) {
            queryParameters['propertyId'] = requestParameters.propertyId;
        }

        if (requestParameters.roomId) {
            queryParameters['roomId'] = requestParameters.roomId;
        }

        if (requestParameters.bookingId) {
            queryParameters['bookingId'] = requestParameters.bookingId;
        }

        if (requestParameters.masterId) {
            queryParameters['masterId'] = requestParameters.masterId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/bookings/messages`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BookingsMessagesPatchRequestToJSON(requestParameters.bookingsMessagesPatchRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Make changes in all messages in a selection.
     */
    async bookingsMessagesPatch(requestParameters: BookingsMessagesPatchOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bookingsMessagesPatchRaw(requestParameters, initOverrides);
    }

    /**
     * Send messages or mark them as read
     */
    async bookingsMessagesPostRaw(requestParameters: BookingsMessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookingsPost201ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/bookings/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.hostMessage.map(HostMessageToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingsPost201ResponseInnerFromJSON));
    }

    /**
     * Send messages or mark them as read
     */
    async bookingsMessagesPost(requestParameters: BookingsMessagesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookingsPost201ResponseInner>> {
        const response = await this.bookingsMessagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * To add a new info item to a booking, include it without an info item id To modify an info item, include the info item id with the code and/or text fields To delete an info item, include only the info item id 
     * Create or update bookings
     */
    async bookingsPostRaw(requestParameters: BookingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookingsPost201ResponseInner>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/bookings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.bookingsPostRequestInner.map(BookingsPostRequestInnerToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookingsPost201ResponseInnerFromJSON));
    }

    /**
     * To add a new info item to a booking, include it without an info item id To modify an info item, include the info item id with the code and/or text fields To delete an info item, include only the info item id 
     * Create or update bookings
     */
    async bookingsPost(requestParameters: BookingsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookingsPost201ResponseInner>> {
        const response = await this.bookingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const BookingsGetFilterEnum = {
    Arrivals: 'arrivals',
    Departures: 'departures',
    New: 'new',
    Current: 'current'
} as const;
export type BookingsGetFilterEnum = typeof BookingsGetFilterEnum[keyof typeof BookingsGetFilterEnum];
/**
 * @export
 */
export const BookingsGetChannelEnum = {
    Agoda: 'agoda',
    Airbnb: 'airbnb',
    Asiatravel: 'asiatravel',
    Atraveode: 'atraveode',
    Booking: 'booking',
    Bookingpage: 'bookingpage',
    Despegar: 'despegar',
    Direct: 'direct',
    Edreamsodigeo: 'edreamsodigeo',
    Expedia: 'expedia',
    Feratel: 'feratel',
    Goibibo: 'goibibo',
    Hometogo: 'hometogo',
    Hostelworld: 'hostelworld',
    Hotelbeds: 'hotelbeds',
    Hrs: 'hrs',
    Jomres: 'jomres',
    Marriott: 'marriott',
    Ostrovokru: 'ostrovokru',
    Ota: 'ota',
    Tiket: 'tiket',
    Tomastravel: 'tomastravel',
    Traveloka: 'traveloka',
    Travia: 'travia',
    Traum: 'traum',
    Trip: 'trip',
    Tripadvisorrentals: 'tripadvisorrentals',
    Vacationstay: 'vacationstay',
    Vrbo: 'vrbo',
    Airbnbical: 'airbnbical',
    Bedandbreakfasteu: 'bedandbreakfasteu',
    Bedandbreakfastnl: 'bedandbreakfastnl',
    Bookeasycomau: 'bookeasycomau',
    Bookitconz: 'bookitconz',
    Flipkey: 'flipkey',
    Googlecal: 'googlecal',
    Googleads: 'googleads',
    Guestlinkcouk: 'guestlinkcouk',
    Holidaylettingscouk: 'holidaylettingscouk',
    Hostelinternational: 'hostelinternational',
    Hostelsclub: 'hostelsclub',
    Housetripcom: 'housetripcom',
    Icalimport1: 'icalimport1',
    Icalimport2: 'icalimport2',
    Icalimport3: 'icalimport3',
    Lastminute: 'lastminute',
    Nzaa: 'nzaa',
    Reserva: 'reserva',
    Rezintelnet: 'rezintelnet',
    Tablethotels: 'tablethotels',
    Tablethotelscom: 'tablethotelscom',
    Traumferienwohnungen: 'traumferienwohnungen',
    Trivagocom: 'trivagocom',
    Visitscotlandcom: 'visitscotlandcom',
    Vrboical: 'vrboical',
    Webroomsconz: 'webroomsconz'
} as const;
export type BookingsGetChannelEnum = typeof BookingsGetChannelEnum[keyof typeof BookingsGetChannelEnum];
/**
 * @export
 */
export const BookingsGetStatusEnum = {
    Confirmed: 'confirmed',
    Request: 'request',
    New: 'new',
    Cancelled: 'cancelled',
    Black: 'black',
    Inquiry: 'inquiry'
} as const;
export type BookingsGetStatusEnum = typeof BookingsGetStatusEnum[keyof typeof BookingsGetStatusEnum];
/**
 * @export
 */
export const BookingsMessagesGetFilterEnum = {
    Read: 'read',
    Unread: 'unread'
} as const;
export type BookingsMessagesGetFilterEnum = typeof BookingsMessagesGetFilterEnum[keyof typeof BookingsMessagesGetFilterEnum];
/**
 * @export
 */
export const BookingsMessagesGetMessageSourceEnum = {
    Host: 'host',
    Guest: 'guest'
} as const;
export type BookingsMessagesGetMessageSourceEnum = typeof BookingsMessagesGetMessageSourceEnum[keyof typeof BookingsMessagesGetMessageSourceEnum];
