/* tslint:disable */
/* eslint-disable */
/**
 * API V2
 * For more information see [wiki.beds24.com/index.php/API_V2.0](https://wiki.beds24.com/index.php/API_V2.0)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RefreshToken,
  Token,
  TokenDetails,
  UnsuccessfulApiResponse,
} from '../models/index';
import {
    RefreshTokenFromJSON,
    RefreshTokenToJSON,
    TokenFromJSON,
    TokenToJSON,
    TokenDetailsFromJSON,
    TokenDetailsToJSON,
    UnsuccessfulApiResponseFromJSON,
    UnsuccessfulApiResponseToJSON,
} from '../models/index';

export interface AuthenticationDetailsGetRequest {
    token?: string;
}

export interface AuthenticationSetupGetRequest {
    code: string;
    deviceName?: string;
}

export interface AuthenticationTokenDeleteRequest {
    refreshToken: string;
}

export interface AuthenticationTokenGetRequest {
    refreshToken: string;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     * Get information about a token and diagnostics
     */
    async authenticationDetailsGetRaw(requestParameters: AuthenticationDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenDetails>> {
        const queryParameters: any = {};

        if (requestParameters.token !== undefined) {
            queryParameters['token'] = requestParameters.token;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["token"] = await this.configuration.apiKey("token"); // token authentication
        }

        const response = await this.request({
            path: `/authentication/details`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenDetailsFromJSON(jsonValue));
    }

    /**
     * Get information about a token and diagnostics
     */
    async authenticationDetailsGet(requestParameters: AuthenticationDetailsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenDetails> {
        const response = await this.authenticationDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Note: Refresh tokens do not expire so long as they have been used within the past 30 days  Codes can be generated here [https://beds24.com/control3.php?pagetype=apiv2](https://beds24.com/control3.php?pagetype=apiv2)  Possible scopes are: bookings bookings-personal bookings-financial inventory properties accounts channels 
     * Get a refresh token using an invite code code
     */
    async authenticationSetupGetRaw(requestParameters: AuthenticationSetupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshToken>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling authenticationSetupGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.code !== undefined && requestParameters.code !== null) {
            headerParameters['code'] = String(requestParameters.code);
        }

        if (requestParameters.deviceName !== undefined && requestParameters.deviceName !== null) {
            headerParameters['deviceName'] = String(requestParameters.deviceName);
        }

        const response = await this.request({
            path: `/authentication/setup`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshTokenFromJSON(jsonValue));
    }

    /**
     * Note: Refresh tokens do not expire so long as they have been used within the past 30 days  Codes can be generated here [https://beds24.com/control3.php?pagetype=apiv2](https://beds24.com/control3.php?pagetype=apiv2)  Possible scopes are: bookings bookings-personal bookings-financial inventory properties accounts channels 
     * Get a refresh token using an invite code code
     */
    async authenticationSetupGet(requestParameters: AuthenticationSetupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshToken> {
        const response = await this.authenticationSetupGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a refresh token
     */
    async authenticationTokenDeleteRaw(requestParameters: AuthenticationTokenDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.refreshToken === null || requestParameters.refreshToken === undefined) {
            throw new runtime.RequiredError('refreshToken','Required parameter requestParameters.refreshToken was null or undefined when calling authenticationTokenDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.refreshToken !== undefined && requestParameters.refreshToken !== null) {
            headerParameters['refreshToken'] = String(requestParameters.refreshToken);
        }

        const response = await this.request({
            path: `/authentication/token`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a refresh token
     */
    async authenticationTokenDelete(requestParameters: AuthenticationTokenDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authenticationTokenDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Note: Refresh tokens do not expire so long as they have been used within the past 30 days 
     * Get an authentication token using a refresh token
     */
    async authenticationTokenGetRaw(requestParameters: AuthenticationTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters.refreshToken === null || requestParameters.refreshToken === undefined) {
            throw new runtime.RequiredError('refreshToken','Required parameter requestParameters.refreshToken was null or undefined when calling authenticationTokenGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.refreshToken !== undefined && requestParameters.refreshToken !== null) {
            headerParameters['refreshToken'] = String(requestParameters.refreshToken);
        }

        const response = await this.request({
            path: `/authentication/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * Note: Refresh tokens do not expire so long as they have been used within the past 30 days 
     * Get an authentication token using a refresh token
     */
    async authenticationTokenGet(requestParameters: AuthenticationTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.authenticationTokenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
