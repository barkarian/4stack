/* tslint:disable */
/* eslint-disable */
/**
 * API V2
 * For more information see [wiki.beds24.com/index.php/API_V2.0](https://wiki.beds24.com/index.php/API_V2.0)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    bookingId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Message
     */
    read?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    attachment?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    attachmentName?: string;
    /**
     * Supported mime types by channel:
     * 
     * Airbnb - jpeg, png and gif
     * 
     * Booking.com - jpeg, png"
     * 
     * VRBO - jpeg, png, gif, pdf
     * 
     * @type {string}
     * @memberof Message
     */
    attachmentMimeType?: MessageAttachmentMimeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    roomId?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    propertyId?: number;
    /**
     * 
     * @type {Date}
     * @memberof Message
     */
    time?: Date;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    source?: MessageSourceEnum;
}


/**
 * @export
 */
export const MessageAttachmentMimeTypeEnum = {
    ImageJpeg: 'image/jpeg',
    ImagePng: 'image/png',
    ImageGif: 'image/gif',
    ApplicationPdf: 'application/pdf'
} as const;
export type MessageAttachmentMimeTypeEnum = typeof MessageAttachmentMimeTypeEnum[keyof typeof MessageAttachmentMimeTypeEnum];

/**
 * @export
 */
export const MessageSourceEnum = {
    Host: 'host',
    Guest: 'guest'
} as const;
export type MessageSourceEnum = typeof MessageSourceEnum[keyof typeof MessageSourceEnum];


/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'bookingId': !exists(json, 'bookingId') ? undefined : json['bookingId'],
        'read': !exists(json, 'read') ? undefined : json['read'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'attachment': !exists(json, 'attachment') ? undefined : json['attachment'],
        'attachmentName': !exists(json, 'attachmentName') ? undefined : json['attachmentName'],
        'attachmentMimeType': !exists(json, 'attachmentMimeType') ? undefined : json['attachmentMimeType'],
        'roomId': !exists(json, 'roomId') ? undefined : json['roomId'],
        'propertyId': !exists(json, 'propertyId') ? undefined : json['propertyId'],
        'time': !exists(json, 'time') ? undefined : (new Date(json['time'])),
        'source': !exists(json, 'source') ? undefined : json['source'],
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'bookingId': value.bookingId,
        'read': value.read,
        'message': value.message,
        'attachment': value.attachment,
        'attachmentName': value.attachmentName,
        'attachmentMimeType': value.attachmentMimeType,
        'roomId': value.roomId,
        'propertyId': value.propertyId,
        'time': value.time === undefined ? undefined : (value.time.toISOString()),
        'source': value.source,
    };
}

