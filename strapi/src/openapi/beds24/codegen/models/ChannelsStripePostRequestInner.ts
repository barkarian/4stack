/* tslint:disable */
/* eslint-disable */
/**
 * API V2
 * For more information see [wiki.beds24.com/index.php/API_V2.0](https://wiki.beds24.com/index.php/API_V2.0)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StripeAddPaymentMethod } from './StripeAddPaymentMethod';
import {
    StripeAddPaymentMethodFromJSON,
    StripeAddPaymentMethodFromJSONTyped,
    StripeAddPaymentMethodToJSON,
} from './StripeAddPaymentMethod';
import type { StripeAddPaymentMethodCard } from './StripeAddPaymentMethodCard';
import {
    StripeAddPaymentMethodCardFromJSON,
    StripeAddPaymentMethodCardFromJSONTyped,
    StripeAddPaymentMethodCardToJSON,
} from './StripeAddPaymentMethodCard';
import type { StripeCaptureCharge } from './StripeCaptureCharge';
import {
    StripeCaptureChargeFromJSON,
    StripeCaptureChargeFromJSONTyped,
    StripeCaptureChargeToJSON,
} from './StripeCaptureCharge';
import type { StripeChargePaymentMethod } from './StripeChargePaymentMethod';
import {
    StripeChargePaymentMethodFromJSON,
    StripeChargePaymentMethodFromJSONTyped,
    StripeChargePaymentMethodToJSON,
} from './StripeChargePaymentMethod';
import type { StripeCreateSession } from './StripeCreateSession';
import {
    StripeCreateSessionFromJSON,
    StripeCreateSessionFromJSONTyped,
    StripeCreateSessionToJSON,
} from './StripeCreateSession';
import type { StripeCreateSessionLineItemsInner } from './StripeCreateSessionLineItemsInner';
import {
    StripeCreateSessionLineItemsInnerFromJSON,
    StripeCreateSessionLineItemsInnerFromJSONTyped,
    StripeCreateSessionLineItemsInnerToJSON,
} from './StripeCreateSessionLineItemsInner';
import type { StripeDetachPaymentMethod } from './StripeDetachPaymentMethod';
import {
    StripeDetachPaymentMethodFromJSON,
    StripeDetachPaymentMethodFromJSONTyped,
    StripeDetachPaymentMethodToJSON,
} from './StripeDetachPaymentMethod';
import type { StripeRefundCharge } from './StripeRefundCharge';
import {
    StripeRefundChargeFromJSON,
    StripeRefundChargeFromJSONTyped,
    StripeRefundChargeToJSON,
} from './StripeRefundCharge';
import type { StripeReleaseCharge } from './StripeReleaseCharge';
import {
    StripeReleaseChargeFromJSON,
    StripeReleaseChargeFromJSONTyped,
    StripeReleaseChargeToJSON,
} from './StripeReleaseCharge';

/**
 * 
 * @export
 * @interface ChannelsStripePostRequestInner
 */
export interface ChannelsStripePostRequestInner {
    /**
     * 
     * @type {string}
     * @memberof ChannelsStripePostRequestInner
     */
    action?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelsStripePostRequestInner
     */
    bookingId?: number;
    /**
     * 
     * @type {Array<StripeCreateSessionLineItemsInner>}
     * @memberof ChannelsStripePostRequestInner
     */
    lineItems?: Array<StripeCreateSessionLineItemsInner>;
    /**
     * 
     * @type {string}
     * @memberof ChannelsStripePostRequestInner
     */
    successUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelsStripePostRequestInner
     */
    cancelUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelsStripePostRequestInner
     */
    capture?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelsStripePostRequestInner
     */
    stripePaymentMethodId?: string;
    /**
     * 
     * @type {number}
     * @memberof ChannelsStripePostRequestInner
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof ChannelsStripePostRequestInner
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelsStripePostRequestInner
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChannelsStripePostRequestInner
     */
    moto?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChannelsStripePostRequestInner
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelsStripePostRequestInner
     */
    stripeChargeId?: string;
    /**
     * 
     * @type {StripeAddPaymentMethodCard}
     * @memberof ChannelsStripePostRequestInner
     */
    card?: StripeAddPaymentMethodCard;
}

/**
 * Check if a given object implements the ChannelsStripePostRequestInner interface.
 */
export function instanceOfChannelsStripePostRequestInner(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChannelsStripePostRequestInnerFromJSON(json: any): ChannelsStripePostRequestInner {
    return ChannelsStripePostRequestInnerFromJSONTyped(json, false);
}

export function ChannelsStripePostRequestInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelsStripePostRequestInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'action': !exists(json, 'action') ? undefined : json['action'],
        'bookingId': !exists(json, 'bookingId') ? undefined : json['bookingId'],
        'lineItems': !exists(json, 'line_items') ? undefined : ((json['line_items'] as Array<any>).map(StripeCreateSessionLineItemsInnerFromJSON)),
        'successUrl': !exists(json, 'success_url') ? undefined : json['success_url'],
        'cancelUrl': !exists(json, 'cancel_url') ? undefined : json['cancel_url'],
        'capture': !exists(json, 'capture') ? undefined : json['capture'],
        'stripePaymentMethodId': !exists(json, 'stripePaymentMethodId') ? undefined : json['stripePaymentMethodId'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'moto': !exists(json, 'moto') ? undefined : json['moto'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'stripeChargeId': !exists(json, 'stripeChargeId') ? undefined : json['stripeChargeId'],
        'card': !exists(json, 'card') ? undefined : StripeAddPaymentMethodCardFromJSON(json['card']),
    };
}

export function ChannelsStripePostRequestInnerToJSON(value?: ChannelsStripePostRequestInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'action': value.action,
        'bookingId': value.bookingId,
        'line_items': value.lineItems === undefined ? undefined : ((value.lineItems as Array<any>).map(StripeCreateSessionLineItemsInnerToJSON)),
        'success_url': value.successUrl,
        'cancel_url': value.cancelUrl,
        'capture': value.capture,
        'stripePaymentMethodId': value.stripePaymentMethodId,
        'amount': value.amount,
        'currency': value.currency,
        'description': value.description,
        'moto': value.moto,
        'source': value.source,
        'stripeChargeId': value.stripeChargeId,
        'card': StripeAddPaymentMethodCardToJSON(value.card),
    };
}

